#include "PointerMap.h"
#include "MemoryManager.h"

DWORD health;
DWORD maxHealth;
DWORD mana;
DWORD maxMana;
DWORD target;
DWORD protectionZone;
DWORD speed;
DWORD baseSpeed;
DWORD cooldownF1;
DWORD cooldownF2;
DWORD cooldownF3;
DWORD cooldownF4;
DWORD cooldownF5;
DWORD cooldownF6;
DWORD cooldownF7;
DWORD cooldownF8;
DWORD cooldownF9;
DWORD cooldownF10;
DWORD cooldownF11;
DWORD cooldownF12;
DWORD cooldownAttack;
DWORD buff;
DWORD positionX;
DWORD positionY;
DWORD positionZ;
DWORD zoom;
DWORD battleCount;
DWORD direction;

void PointerMap::initializePointers(HANDLE processHandle, DWORD pID)
{
    DWORD THREADSTACK0 = getThreadBaseAddress(0, pID, processHandle);
    DWORD MAGEOTMODULE = dwGetModuleBaseAddress(PROCESS_NAME, pID);

    health = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x40, 0x18, 0x4, 0x38, 0x28, 0x18, 0x8, 0x50 });
    maxHealth = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x40, 0x18, 0x4, 0x38, 0x28, 0x18, 0x8, 0x58 });
    mana = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x40, 0x4, 0x38, 0x44, 0x0, 0x44 });
    maxMana = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x40, 0x4, 0x38, 0x44, 0x0, 0x48 });
    target = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1AC, 0xA0, 0x24, 0x0, 0x88, 0x4, 0x34, 0x28 });
    protectionZone = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x3C, 0x55 });
    speed = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0xCC, 0x4, 0x3C, 0x3C, 0x8, 0xF0, 0x14, 0x70 });
    baseSpeed = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0xCC, 0x4, 0x3C, 0x3C, 0x8, 0xF0, 0x14, 0x72 });
    cooldownF1 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x0, 0x0, 0x48 });
    cooldownF2 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x8, 0x0, 0x48 });
    cooldownF3 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x14, 0x0, 0x48 });
    cooldownF4 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x1C, 0x0, 0x48 });
    cooldownF5 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x20, 0x0, 0x48 });
    cooldownF6 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x28, 0x0, 0x48 });
    cooldownF7 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x30, 0x0, 0x48 });
    cooldownF8 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x38, 0x0, 0x48 });
    cooldownF9 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x40, 0x0, 0x48 });
    cooldownF10 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x48, 0x0, 0x48 });
    cooldownF11 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x50, 0x0, 0x48 });
    cooldownF12 = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x58, 0x0, 0x48 });
    cooldownAttack = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1C0, 0x58, 0x0, 0xC, 0x4, 0x68, 0x70, 0x0, 0x48 });
    buff = readMemoryPointer(processHandle, { MAGEOTMODULE + 0xEA38D4, 0x4, 0x24, 0x0, 0x34, 0x4, 0x74, 0x78, 0x58, 0x18 });
    positionX = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x38, 0xA4, 0x0, 0x10, 0x10, 0x10, 0x4, 0x40 });
    positionY = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x38, 0xA4, 0x0, 0x10, 0x10, 0x10, 0x4, 0x44 });
    positionZ = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x38, 0xA4, 0x0, 0x10, 0x10, 0x10, 0x4, 0x48 });
    zoom = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x38, 0xA4, 0xC, 0x10, 0x4, 0x78, 0x14, 0x60 });
    battleCount = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1AC, 0xDC, 0x40, 0x4, 0x18, 0x48, 0x10, 0xC, 0x64 });
    direction = readMemoryPointer(processHandle, { THREADSTACK0 - 0x114, 0x1B4, 0x3C, 0xC, 0x0, 0x4, 0x1C, 0x70, 0x10, 0x40 });
}

vec3 getDirectionOffset(int direction)
{
    if (direction == DIRECTION_NORTH)
        return { 0, -1, 0 };
    else if (direction == DIRECTION_EAST)
        return { 1, 0, 0 };
    else if (direction == DIRECTION_SOUTH)
        return { 0, 1, 0 };
    else // WEST
        return { -1, 0, 0 };
}